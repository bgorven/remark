apply plugin: 'java'
apply plugin: 'maven'

apply plugin: com.smokejumperit.gradle.OneJarPlugin

//---------------------------------------------------------------------------
// Base properties
//---------------------------------------------------------------------------

description = 'The OverZealous Creations Remark library.'
targetCompatibility = 1.5
sourceCompatibility = 1.5

//---------------------------------------------------------------------------
// Dependencies
//---------------------------------------------------------------------------
buildscript {
	repositories {
		mavenCentral()
		mavenRepo urls:'http://repo.smokejumperit.com'
	}
	dependencies {
		classpath group: 'com.smokejumperit', name: 'gradle-plugins', version: '0.8.2'
		classpath group: 'org.pegdown', name: 'pegdown', version: '1.+'
	}
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.jsoup', name: 'jsoup', version: '1.6.+'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'
	compile group: 'commons-cli', name: 'commons-cli', version: '1.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
	testCompile group: 'commons-io', name: 'commons-io', version: '2.+'
}

//---------------------------------------------------------------------------
// Override default tasks
//---------------------------------------------------------------------------
jar {
    manifest {
        attributes 'Main-Class': 'com.overzealous.remark.Main'
    }
}

javadoc {
	configure(options) {
		options.links = [ 'http://download.oracle.com/javase/6/docs/api/', 'http://jsoup.org/apidocs/' ]
		options.author = true
		options.bottom = '<div style="font-size:.75em; font-style:italic; text-align:center;">&copy; 2011 <a href="http://www.overzealous.com/">OverZealous Creations, LLC</a> - <a href="https://bitbucket.org/OverZealous/remark">BitBucket Repository</a></div>'
	}
}



//---------------------------------------------------------------------------
// Custom tasks
//---------------------------------------------------------------------------

task copyManualFiles(type: Copy) {
	from 'src/manual/'
	into 'build/docs/manual/'
	include 'css/**'
	include 'images/**'
	include 'js/**'
	include 'favicon.ico'
	include 'apple-touch*.*'
}

task createManual(dependsOn: [javadoc, copyManualFiles], description: "Converts the markdown manual to HTML for deployment") {
	group = 'Documentation'
	templateFile = file('src/manual/_template.html')
	srcFiles = files { file('src/manual').listFiles().findAll{ it.name.endsWith('.md') } }
	destDir = file('build/docs/manual')
	inputs.files srcFiles, templateFile
	//outputs.dir destDir
	doLast {
		String template = file('src/manual/_template.html').text
		def keyword = ~/\$\{([\-a-z]+)\}/
		templateMe = { String filename, String body, String title = null ->
			def props = [
				title: 'Remark Manual',
				body: body,
				pageclass: filename
			]
			if(title != null) {
				props.title = "${props.title} - $title".toString()
			}
			
			template.replaceAll(keyword) { m, kw ->
				props[kw] ?: (filename == kw ? ' selected' : '')
			}
		}
		def pd = new org.pegdown.PegDownProcessor(org.pegdown.Extensions.ALL);
		srcFiles.each{ File mdFile ->
			String htmlFileName = mdFile.name.replace('.md', '.html')
			File dest = file(new File(htmlFileName, destDir))
			if(dest.exists() && (!dest.isFile() || !dest.canWrite())) {
				throw new Exception("Unable to write to destination: $dest.  Please run gradle clean before continuing")
			}
			if(!dest.isFile() || 
					dest.lastModified() < mdFile.lastModified() ||
					dest.lastModified() < templateFile.lastModified()) {
				String input = mdFile.getText('UTF-8')
				String title = null;
				if(input.startsWith('#')) {
					def titleMatch = (input =~ /#++([^\n#]+)/)
					if(titleMatch.find()) {
						title = titleMatch[0][1].trim()
					}
				}
				def out = pd.markdownToHtml(input)
				dest.setText(templateMe(mdFile.name.replace('.md', ''), out, title), 'UTF-8')
			}
		}
	}
}
task buildDist(dependsOn: [build, createManual, oneJar], description: "Builds everything.") {
	group = 'Distribution'
}
if(gradle.startParameter.taskNames.any{ it == 'cleanBuildDist' || it == 'cBD' }) {
	compileJava.dependsOn clean
}
task cleanBuildDist(dependsOn: [buildDist], description: "Cleans and builds everything.") {
	group = 'Distribution'
}

task bumpVersion(description: 'Bumps the app Version for release.') << {
	//noinspection GroovyAssignabilityCheck
	def components = version.split('\\.').collect { Integer.parseInt(it.replace('-SNAPSHOT', ''))}
	components[2] += 1
	def nextIntegrationVersion = components.join('.')+"-SNAPSHOT"
	println "Bumping $version to $nextIntegrationVersion"
	def newProps = file("gradle.properties").text.replace(version, nextIntegrationVersion)
	file("gradle.properties").text = newProps
}

task intellijSync(description: 'Add gradle dependecies to IntelliJ project library') << {

	// Add source and javadoc artifacts
	configurations.each{
		it.dependencies.each { dep ->
			['jar':null,'source':'sources','javadoc':'javadoc'].each{arType, arClassifier ->
				dep.artifact {
					name = dep.name
					extension = 'jar'
					type = arType
					classifier = arClassifier
				}
			}
		}
	}

    final def librariesDir = new File(".idea${File.separator}libraries")
    librariesDir.mkdirs()

    final def userHomeGradle = project.gradle.gradleUserHomeDir
	if(!userHomeGradle) {
    	println "Set the USER_HOME_GRADLE variable to '$userHomeGradle.path'"
	}

    def makeJarList = { path ->
		//noinspection GroovyAssignabilityCheck
		path.split(File.pathSeparator).collect {
            it.replaceAll userHomeGradle.path, "\\\$USER_HOME_GRADLE\\\$"
        }
    }
    final def compileJars = makeJarList(configurations.compile.asPath)
    final def testJars = makeJarList(configurations.testCompile.asPath) - compileJars

    def createLibrary = { String fileName, String libraryName, jars ->
		final def gradleLibXml = new File(librariesDir, fileName)
        gradleLibXml.write """
<component name="libraryTable">
<library name="$libraryName"/>
</component>"""
        final def xmlRoot = new XmlParser().parse(gradleLibXml)
        final def classesNode = xmlRoot.library[0].appendNode('CLASSES')
		final def sourcesNode = xmlRoot.library[0].appendNode('SOURCES')
		final def javadocNode = xmlRoot.library[0].appendNode('JAVADOC')

        println "Creating $libraryName";

        jars.each { jar ->
			def type;
			if(jar ==~ /.*-sources\.jar$/) {
				type = 'sources';
				sourcesNode.appendNode('root', [url: "jar://$jar!/"])
			} else if(jar ==~ /.*-javadoc\.jar$/) {
				type = 'javadoc';
				javadocNode.appendNode('root', [url: "jar://$jar!/"])
			} else {
				type = 'class';
            	classesNode.appendNode('root', [url: "jar://$jar!/"])
			}
			def jarShortName = jar.replace('$USER_HOME_GRADLE$/cache/', '')
			println " - Added $type jar $jarShortName"

        }

        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(xmlRoot)
        gradleLibXml.write writer.toString()
        println "File '${gradleLibXml.path}' updated"
    }
    createLibrary 'Gradle_Libraries.xml', 'Gradle Libraries', compileJars
    createLibrary 'Gradle_Test_Libraries.xml', 'Gradle Test Libraries', testJars
}